sap.ui.define(["sap/ui/core/mvc/Controller",
	'sap/ui/model/SimpleType',
	'sap/ui/model/ValidateException',
	'sap/ui/model/json/JSONModel',
	'sap/m/MessageBox',
	'sap/m/MessageToast'
], function (Controller, SimpleType, ValidateException, JSONModel, MessageBox, MessageToast, ) {
	"use strict";
	return Controller.extend("com.app.tax.TaxApp-alpha.controller.logon", {
			onInit: function () {
				this.oView = this.getView();
				this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);
				var oModel = new sap.ui.model.json.JSONModel();
				oModel.loadData("model/sample.json");
				this.oView.setModel(oModel, "localData");

				// this.oView.setModel(new JSONModel({
				// 	//	name: "",
				// 	email: ""
				// }));

				// attach handlers for validation errors
				//	sap.ui.getCore().getMessageManager().registerObject(this.oView.byId("nameInput"), true);
				sap.ui.getCore().getMessageManager().registerObject(this.oView.byId("emailInput"), true);

			},
			_validateInput: function (oInput) {
				var oBinding = oInput.getBinding("value");
				var sValueState = "None";
				var bValidationError = false;

				try {
					oBinding.getType().validateValue(oInput.getValue());
				} catch (oException) {
					//sValueState = "Error";
					bValidationError = true;
				}
				oInput.setValueState(sValueState);

				return bValidationError;
			},

			onContinue: function () {
				// collect input controls
				var json = this.getView().getModel("localData").getData();
				var mailid = this.getView().byId("emailInput").getValue();
				var password = this.getView().byId("ipass").getValue();
				var check = json.Admin.filter(a => a.email == mailid && a.pass == password).length;
				var check1 = json.Client.filter(b => b.email == mailid && b.pass == password).length;
				var oView = this.getView();
				var aInputs = [
					oView.byId("emailInput"),
					oView.byId("ipass")
				];
				var bValidationError = false;

				// check that inputs are not empty
				// this does not happen during data binding as this is only triggered by changes
				aInputs.forEach(function (oInput) {
					bValidationError = this._validateInput(oInput) || bValidationError;
				}, this);

				// output result
				if (!bValidationError) {
					MessageBox.alert("A validation error has occured. Complete your input first");

				} else {
					if (check1 === 1) {
						this.oRouter.navTo("userDashboard");
					}
					else if(check === 1) {
						this.oRouter.navTo("adminDash");

					} else {
						MessageBox.alert("Your credentials are incorrect");
					}

				}
			},
		// },
		/**
		 *@memberOf com.app.tax.TaxApp-alpha.controller.logon
		 */
		// pressme: function (oEvent) {
		// 	//This code was generated by the layout editor
		// },

		customEMailType: SimpleType.extend("email", {
			formatValue: function (oValue) {
				return oValue;
			},
			parseValue: function (oValue) {
				//parsing step takes place before validating step, value could be altered here
				return oValue;
			},
			validateValue: function (oValue) {
				// The following Regex is NOT a completely correct one and only used for demonstration purposes.
				// RFC 5322 cannot even checked by a Regex and the Regex for RFC 822 is very long and complex.
				var rexMail = /^\w+[\w-+\.]*\@\w+([-\.]\w+)*\.[a-zA-Z]{2,}$/;
				if (!oValue.match(rexMail)) {
					throw new ValidateException("'" + oValue + "' is not a valid email address");
				}
			}
		})

	});
});